<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- com.javalab.spring 패키지에 있는 @Component 어노테이션 적용된 모든 클래스를 빈으로 생성해라 -->
	<context:component-scan
		base-package="com.javalab.spring"></context:component-scan>

	<!--context:property-placeholder :properties파일 읽어오는 역할 -->
	<context:property-placeholder
		location="classpath:config/database.properties" />

	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

	<!-- DataSource Configuration -->

	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>

	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 트랜잭션 관리자 빈 등록 platformTransactionManager 인터페이스를 구현한 클래스로서 커밋과 롤백 메소드 
		보유 트랜잭션 관리자 자체로 커밋 롤백과 같은 트랜잭션 처리 기능 없음. 실질적으로 트랜잭션을 처리하는 주체는 트랜잭션 어드바이스임. -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- [4] Transaction 관리 어드바이스 설정 -->
	<!-- 1. 빈으로 등록된 트랜잭션 관리자를 이용하여 실질적인 트랜잭션을 제어하는 어드바이스. 2. 스프링 트랜잭션 관리 기능의 
		Advice 클래스는 개발자가 직접 구현하지 않으며 스프링 컨테이너가 <tx:advice> 설정을 참조하여 자동 생성. 3. 따라서 
		개발자는 어떤 클래스를 이용하여 advice 객체가 만들어지고, 그 내부에 어떤 메서드가 존재하는지 알 수 없음. 4. 다만 생성되는 
		어드바이스의 아이디를 id 속성으로 지정하고 어드바이스 객체가 사용할 트랜잭션 관리자를 transaction-manager 속성으로 
		지정하면 됨. 5. 다음 설정은 "txAdvice"라는 어드바이스가 앞에서 설정한 트랜잭션 관리자(txManager)를 이용하여 트랜잭션을 
		커밋 롤백한다는 설정이다. 6. <tx:attributes>의 자식 엘리먼트로 <tx:method> 엘리먼트를 이용하여 트랜잭션을 
		적용할 메소드를 지정할 수 있다. 7. name="get*" get으로 시작하는 모든 메소드는 "읽기전용"으로 처리되어 트랜잭션 관리 
		대상에서 제외하고 나머지 메소드들은 트랜잭션 관리에 포함한 것이다. -->	
		
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"></tx:method>
			<tx:method  name="*"></tx:method>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut expression="execution(* com.javalab.spring..*Impl.*(..))" id="txPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
	
	<!-- <bean id="before" class="com.javalab.spring.common.BeforeAdvice"></bean> 
		<aop:config> <aop:pointcut expression="execution(* com.javalab.spring..*Impl.*(..))" 
		id="allPointcut" /> <aop:pointcut expression="execution(* com.javalab.spring..*Impl.get*(..))" 
		id="getPointcut" /> <aop:aspect ref="before"> <aop:before method="beforeLogJp" 
		pointcut-ref="allPointcut" /> </aop:aspect> </aop:config> -->

	<!-- after-throwing -->
	<!-- <bean id="afterThrowing" class="com.javalab.spring.common.AfterThrowingAdvice"></bean> 
		<aop:config> <aop:pointcut expression="execution(* com.javalab.spring..*Impl.*(..))" 
		id="allPointcut" /> <aop:pointcut expression="execution(* com.javalab.spring..*Impl.insert*(..))" 
		id="insertPointcut" /> <aop:aspect ref="afterThrowing"> <aop:after-throwing 
		method="exceptionLog" pointcut-ref="insertPointcut" /> </aop:aspect> </aop:config> -->

	<!-- <bean id="around" class="com.javalab.spring.common.AroundAdvice"></bean> 
		<aop:config> <aop:pointcut expression="execution(* com.javalab.spring..*Impl.*(..))" 
		id="allPointcut" /> <aop:aspect ref="around"> <aop:around method="aroundLog" 
		pointcut-ref="allPointcut" /> </aop:aspect> </aop:config> -->


</beans>