<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		
	<context:annotation-config />
    
    <!-- 다음 두 설정은 JPA에서 제공하는 @Transactional을 사용하기 위함 
   		- JPA는 기본적으로 Transaction(트랜잭션)을 지원하기 때문에 이 설정이 필요함
   		- 데이터 INSERT/UPDATE/DELETE 작업을 위해 @Transactional 어노테이션 필요함
	-->    
    <!-- 트랜잭션 관리자 활성화 -->
    <tx:annotation-driven/>
    
    <!-- 트랜잭션 관리자 등록 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <!-- JPA에서 발생하는 예외를 스프링 예외로 변환해서 처리하겠다는 의미 -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
    
    <!-- JPA 설정 (엔티티 매니저 팩토리 등록) -->
    <!-- - 테이블로 매핑 시킬 객체를 엔티티(Entity)라고 하고, 이 엔티티를 관리하는 것이 엔티티 매니저(Entity manger)의 역할
    	 - 엔티티 매니저를 만드는 곳이 바로 엔티티 매니저 팩토리
     -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />        
        <!-- @Entity 탐색 범위 -->
        <property name="packagesToScan" value="com.javalab.springjpa.vo" />        
        <!-- 하이버네이트 구현체 사용 -->
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
        </property>
        
        <!-- 하이버네이트 구현체 사용 
        	 - JPA를 구현한 여러 구현체 중에서 Hibernate를 사용하겠다고 설정
        	 - 반드시 필요한 설정은 아니지만, Hibernate가 출력하는 쿼리 및 개발의 편의성을 제공받기 위해서 필요함
        -->
        <!-- 하이버네이트 상세 설정 -->
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop> <!-- 방언 -->
                <prop key="hibernate.show_sql">true</prop>                          <!-- SQL 보기 -->
                <prop key="hibernate.format_sql">true</prop>                        <!-- SQL 정렬해서 보기 -->
                <prop key="hibernate.use_sql_comments">true</prop>                  <!-- SQL 주석 보기 -->
                <prop key="hibernate.id.new_generator_mappings">true</prop>         <!-- JPA 표준에 맞게 새로운 키 생성 전략을 사용-->
                <!-- DDL 자동 생성, 애플리케이션이 실행되면 기존의 테이블을 삭제하고, 새로운 테이블을 생성한다는 의미 
                	- create-only : 기본 값이며 아무 일도 일어나지 않음
                	- create-only : 무조건 테이블을 새로 생성
                	- create : 테이블을 drop 한 후 새로 생성
                	- create-drop : SessionFactory가 시작될 때 삭제하고 재생성하며, SessionFactory가 종료될 때 다시 삭제 
                	- validate : 테이블 스키마 검증
                	- update : 테이블  스키마를 갱신
                -->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
    </bean>

    <!-- Connection Pool DataSource -->
<!--     <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/jpadb" />
        <property name="username" value="jpadb" />
        <property name="password" value="jpadb" />
    </bean> -->

	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
   	    <property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"/>
	    <property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@127.0.0.1:1521:xe"/>
	    <property name="username" value="board"/>
	    <property name="password" value="1234"/>
	</bean>
	
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
	    <constructor-arg ref="hikariConfig" />
	</bean>
    
    
    <!-- @Entity 탐색 범위
    	 - 해당 클래스가 엔티티임을 나타내는 @Entity 어노테이션을 스캔하기 위한 범위 
	-->
    <context:component-scan base-package="com.javalab.springjpa.service, com.javalab.springjpa.repository">
        <context:include-filter type="annotation"
                                expression="org.springframework.stereotype.Repository" />
        <context:include-filter type="annotation"
                                expression="org.springframework.stereotype.Service" />
        <context:include-filter type="annotation"
                                expression="org.springframework.stereotype.Component" />
    </context:component-scan>		
		
</beans>
