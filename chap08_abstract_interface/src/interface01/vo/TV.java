package interface01.vo;

/*
 * 인터페이스(interface) - 개발 코드와 객체가 서로 통신하는 접점 역할을 한다.
 * 개발 코드가 인터페이스의 메소드를 호출하면 인터페이스는 객체의 메소드를 호출함.
 *  - 예를들어서 회계팀의 전표처리 로직을 인사팀과 영업팀에서도 사용할 수 있다.
 *    그렇지만 해당 로직은 회계팀 개발자만 알고 다른 팀 개발자는 알 필요가 없다.
 *    그래서 회계 모듈에 인터페이스를 만들고 다른 팀에서는 그 인터페이스의 메소드만
 *    호출하면 전표처리 로직을 수행할 수 있게 됨.
 *    인터페이스를 두지 않으면 전표처리가 필요한 모든 팀에서 전표처리 로직을 각각
 *    가지고 있어야 해서 코드가 중복되고 일관성이 깨지게 됨. 
 *  - 인터페이스는 추상클래스 보다 업무 지시 성격이 훨씬 강하다.
 *    [인터페이스 선언] public interface 인터페이스명 {}
 */
public interface TV {
	// 1. 인터페이스는 생성자가 없다. 그래서 객체로 생성불가
	// 2. 메소드는 몸통이 없다. 추상 메소드이다. 즉 윤곽(시그너처)은 있지만 실체(몸통)가 없음.
	// 3. 인터페이스를 구현한 자식 클래스에서 그 실체를 구현해야 함(오버라이딩).
	// 4. 인터페이스는 상수와 메소드만 가질 수 있음.(예외 있음)
	
	//상수
	public final double PI = 3.141592; 
	
	// 추상메소드(컴파일시 public abstract가 자동으로 붙는다.)
	public void powerOn();		// 추상메소드
	public void powerOff();		// 추상메소드	
	public void volumeUp();		// 추상메소드	
	public void volumeDown();	// 추상메소드	
}