[chap30_spring_mybatis_invoice 특이사항]

 1. [인보이스 어플리케이션]
 
  - 송장(送狀) 또는 인보이스(영어: invoice, bill 또는 tab)는 매매계약의 조건을 정당하게 이행했다는 
   	뜻을 판매측(수출업자)이 구매측(수입업자)에 전달하는 서류로 일반적으로는 발송장이라고 한다. 
   	그러나 계산서나 청구서의 기능도 지니기 때문에 원어 그대로 쓰이기도 한다. 
   	판매측이 보내는 인보이스는 발송한 화물의 내용 명세서이며 거래 계산을 밝힌 계산서 겸 대금청구서이기도 하다. 
   	구매측에 있어서는 선적, 보험, 하환 등의 계약 이행을 명시한 상업문서이며, 또 수입지 세관에 제출하는 
   	수입 신고서에 첨부되는 중요 서류로도 쓰인다. 
  
		
[진행단계]

 [환경설정 파일]
1. pom.xml 복사
2. web.xml 복사
 - root-context.xml 에서 application-context.xml로 스프링 컨테이너 생성 작업명세서 이름 변경 체크
3. application-context.xml 복사
4. security-context.xml 복사
5. servlet-context.xml 복사

 [자바소스코드]

1. vo(dto) 복사
2. common 복사
3. dao 매퍼 인터페이스 복사
4. sqlMapConfig.xml 복사
5. 모든 매퍼.xml 복사

6. com.javalab.invoice.service.user 패키지 복사
   CustomProvider 복사 -security-context.xml 에서 사용)
   IAuthService, AuthServiceImpl 복사

7. security-context.xml 수정
 - com.javalab.invoice.service.user.CustomProvider
8. application-context.xml 수정

9. servlet-context.xml 수정
 - controller 패키지 생성
 
10. sqlMapConfig.xml 수정
11. 매퍼.XML 인터페이스 매퍼 경로 수정

12. /WEB-INF/config/database.properties 파일 준비
 - 테스트 끝나고 프로퍼티스에서 디비 계정 정보 읽어올 경우 사용

13. 어플리케이션 전체 실행에 앞서 "Web Project Settings"확인 "/"
14. Product 클래스에 receipt_date의 자료형을 sql.Date -> util.Date로 변경

 [디버깅]
 
 1. Welcome home! The client locale is ko_KR. 로고 나오면 세팅 성공!
 
 [단위테스트]
 
1. user, user_role read/insert 테스트
 - 이 때 데이터베이스의 테이블에는 데이터가 이미 들어가 있고 시퀀스는 새로 만들었기 때문에
     시퀀스를 통해서 단위테스트를 하면 무결성 오류가 나게 된다. 그래서 다음과 같이 시퀀스 값을
   select 시퀀스.nextvall from dual; 여러번 실행해서 시퀀스를 테이블의 데이터 갯수
     보다 증가시켜 놓은 후에 단위 테스트를 하면 무결성 오류가 안난다.
     
2. Product 매퍼 단위테스트
 - 1.번과 동일한 오류 발생 가능성, nextval 해서 시퀀스 값을 테이블 갯수보다 충분히 늘려서
	작업할것.
 - 2. 카테고리, 상품, 클라이언트(거래처) 모두 리스트조회, 등록 단위테스트 실행  
   
   
[서비스 Layer 작업]

1. com.~~.service.aop

2. com.~~.service.product

3. com.~~.service.sales <-- 패키지는 새로 생성할것!!

4. com.~~.service.util


[vo Date 자료형 변경]

 sql.Date -> util.Date로 변경
  - InvoiceHeader
  - InvoiceDetail
  - InvoiceCommonDto
  - InvoiceCommonResult
  
  
[뷰 jsp단]

1. webapp/resources 폴더 아래에 ckeditor

2. 모든 jsp 복사

3. 메인 페이지인 home.jsp 제공할것.
 - home.jsp에서 정적자원 경로 앞에 /resources/붙일것.
   

[컨트롤러단 작업]

1. 컨트롤러 단은 코딩
1. com.javalab.invoice.controller 복사
 -  

base package인 com.javalab.invoice내의 HomeController를 삭제하면 모든 패키지가 삭제됨 살려둘것
  - HomeController 에 초기화면 처리 리퀘스트 매핑 붙여넣을 것. return "home"
  	@GetMapping("/")
	public String home() 
	{
		return "home";
	}
2. home 패키지에서 첫화면 띄우는 메소드 있음
 - com.javalab.invoice.home 패키지 스캔 되도록 설정해야 메인 화면 뜬다.
 - 이렇게 하는 이유는 클래스 차원의  RequestMapping 설정해서 생기는 문제
3. 




[실행]


[AOP적용]
1. com.javalab.invoice.service.aop
 - CommonPointcut 적용 포인트컷 excution 주소 변경
2. AOP 적용되는 모습도 콘솔 로그로 확인할 것.

[추가 수정]
1. servlet-context.xml
 <context:component-scan base-package="com.javalab.invoice.controller" />
  

 [설명]
 
1. 어플의 전체적인 흐름을 설명할것
 1) 환경설정
 2) 스프링 Seciruty
  - csrf 토큰
 3) 환경설정
 4) AOP를 어노테이션 방식으로 구현
 5) 모달창
 6) Rest API
 7) 컨트롤러 ProductController에 여러개의 서비스가 자동 주입되는 부분 설명
 8) 조회
  - 인보이스 조회화면
 9) select option으로   
  
 [커스터마이징]  
  
1. 모든 컨트롤러  생성자 의존성 주입으로 수정
2. 고객센터 게시판 게시물 등록 및 조회 Rest 방식의 ajax 형태로 제작
3. Html 형태의 템플릿 설명
4. 