<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="30 seconds">
 
    <!-- logback 환경 설정파일 -->
 	<!-- 콘솔창에 로그 남김 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>
    
 	<!-- 파일에도 로그를 남김 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>/Users/tuan/Documents/works/chap21_mybatis03_employeement/src/log/labatory.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>labatory.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
 
        <encoder>
        	<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>
 
    <logger name="com.javalab.controller" level="info"/>
   
   	<!-- SQL문만을 로그로 남기며, PreparedStatment일 경우 관련된 qrgument값으로 대체된 SQL문이 보인다. -->
 	<logger name="jdbc.sqlonly" level="DEBUG"/>
 	
 	<!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보를 포함한다. -->
 	<logger name="jdbc.sqltiming" level="DEBUG"/>
 	
 	<!-- ResultSet을 제외한 모든 jdbc 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 
 	특별히 jdbc 문제를 추적해야할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
 	<logger name="jdbc.audit" level="ERROR"/>
 	
 	<!-- ResultSet을 포함한 모든 JDBC 호출정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
 	<ligger name="jdbc.resultset" level="ERROR"/>
 
    <root level="info">
        <appender-ref ref="CONSOLE"/> <!-- Console에 로그를 출력하고자 할 때 사용 -->
        <appender-ref ref="FILE"/> <!-- File로 로그를 남기고자 할 때 사용 -->
    </root>
 
</configuration>